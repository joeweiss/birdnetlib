{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"birdnetlib","text":"<p>A python api for BirdNET-Analyzer and BirdNET-Lite</p>"},{"location":"#installation","title":"Installation","text":"<p><code>birdnetlib</code> requires Python 3.9+ and prior installation of Tensorflow Lite, librosa and ffmpeg. See BirdNET-Analyzer for more details on installing the Tensorflow-related dependencies.</p> <pre><code>pip install birdnetlib\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p><code>birdnetlib</code> provides a common interface for BirdNET-Analyzer and BirdNET-Lite.</p>"},{"location":"#using-birdnet-analyzer","title":"Using BirdNET-Analyzer","text":"<p>To use the latest BirdNET-Analyzer model, use the <code>Analyzer</code> class.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\nfrom datetime import datetime\n\n# Load and initialize the BirdNET-Analyzer models.\nanalyzer = Analyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    lat=35.4244,\n    lon=-120.7463,\n    date=datetime(year=2022, month=5, day=10), # use date or week_48\n    min_conf=0.25,\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre> <p><code>recording.detections</code> contains a list of detected species, along with time ranges and confidence value.</p> <pre><code>[{'common_name': 'House Finch',\n  'confidence': 0.5744,\n  'end_time': 12.0,\n  'scientific_name': 'Haemorhous mexicanus',\n  'start_time': 9.0,\n  'label': 'Haemorhous mexicanus_House Finch'},\n {'common_name': 'House Finch',\n  'confidence': 0.4496,\n  'end_time': 15.0,\n  'scientific_name': 'Haemorhous mexicanus',\n  'start_time': 12.0,\n  'label': 'Haemorhous mexicanus_House Finch'}]\n</code></pre> <p>The <code>Recording</code> class takes a file path as an argument. You can also use <code>RecordingFileObject</code> to analyze an in-memory object, or <code>RecordingBuffer</code> for handling an array buffer.</p>"},{"location":"#about-birdnet-analyzer","title":"About BirdNET-Analyzer","text":"<p><code>birdnetlib</code> uses models provided by BirdNET-Analyzer and BirdNET-Lite under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License.</p> <p>BirdNET-Analyzer and BirdNET-Lite were developed by the K. Lisa Yang Center for Conservation Bioacoustics at the Cornell Lab of Ornithology.</p> <p>For more information on BirdNET analyzers, please see the project repositories below:</p> <p>BirdNET-Analyzer</p> <p>BirdNET-Lite</p> <p><code>birdnetlib</code> is not associated with BirdNET-Lite, BirdNET-Analyzer or the K. Lisa Yang Center for Conservation Bioacoustics.</p>"},{"location":"#about-birdnetlib","title":"About <code>birdnetlib</code>","text":"<p><code>birdnetlib</code> is maintained by Joe Weiss. Contributions are welcome.</p>"},{"location":"#project-goals","title":"Project Goals","text":"<ul> <li>Establish a unified API for interacting with Tensorflow-based BirdNET analyzers</li> <li>Enable python-based test cases for BirdNET analyzers</li> <li>Make it easier to use BirdNET in python-based projects</li> <li>Make it easier to migrate to new BirdNET versions/models as they become available</li> </ul>"},{"location":"api/","title":"Classes","text":""},{"location":"api/#recording-classes","title":"Recording Classes","text":""},{"location":"api/#recording","title":"Recording","text":"<p>Use the <code>Recording</code> class to open and analyze a file from disk.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\n\nanalyzer = Analyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    min_conf=0.25,\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre> <p>All recording classes can accept an optional lat, lon and date arguments, which will limit the detections to species to those predicted to be included.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\n\nanalyzer = Analyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    min_conf=0.25,\n    lat=35.6,\n    lon=-77.3,\n    date=datetime(year=2023, month=6, day=27),\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre> <p>It is also possible to return all detections, but annotate the detection if the species is on the predicted list for that location and date.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\n\nanalyzer = Analyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    min_conf=0.25,\n    lat=35.6,\n    lon=-77.3,\n    date=datetime(year=2023, month=6, day=27),\n    is_predicted_for_location_and_date=True,\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre>"},{"location":"api/#embeddings","title":"Embeddings","text":"<p>To extract feature embeddings instead of class predictions, use the <code>extract_embeddings</code> method.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\n\nanalyzer = Analyzer()\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n)\nrecording.extract_embeddings()\nprint(recording.embeddings)\n</code></pre>"},{"location":"api/#recordingfileobject","title":"RecordingFileObject","text":"<p>Use the <code>RecordingFileObject</code> class to analyze an in-memory file object.</p> <pre><code>with io.BytesIO(r.content) as fileObj:\n    recording = RecordingFileObject(\n        analyzer,\n        fileObj,\n        lat=35.6,\n        lon=-77.3,\n        date=datetime(year=2023, month=6, day=27),  # use date or week_48\n        min_conf=0.25,\n    )\n    recording.analyze()\n    pprint(recording.detections)\n</code></pre> <p>See Download and analyzer an audio file from a URL for a working implementation of <code>RecordingFileObject</code>.</p>"},{"location":"api/#recordingbuffer","title":"RecordingBuffer","text":"<p>Use the <code>RecordingBuffer</code> class to analyze an in-memory array buffer.</p> <p>See the example Analyze an audio stream in realtime using RecordingBuffer class for more information.</p>"},{"location":"api/#analyzer-classes","title":"Analyzer classes","text":""},{"location":"api/#analyzer","title":"Analyzer","text":""},{"location":"api/#using-specific-versions-of-birdnet-analyzer","title":"Using specific versions of BirdNET-Analyzer","text":"<p>To use a specific version of BirdNET-Analyzer model, pass the version to the <code>Analyzer</code> class.</p> <pre><code># Load and initialize the BirdNET-Analyzer 2.3 model.\nanalyzer = Analyzer(version=\"2.3\")\n</code></pre> <p>Note: <code>birdnetlib</code> is compatible with BirdNET-Analyzer model versions 2.1 and higher. For more information on specific versions of BirdNET-Analyzer, see their model version history.</p>"},{"location":"api/#using-a-custom-classifier-with-birdnet-analyzer","title":"Using a custom classifier with BirdNET-Analyzer","text":"<p>To use a model trained with BirdNET-Analyzer, pass your labels and model path to the <code>Analyzer</code> class.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\n\n# Load and initialize BirdNET-Analyzer with your own model/labels.\n\ncustom_model_path = \"custom_classifiers/trogoniformes.tflite\"\ncustom_labels_path = \"custom_classifiers/trogoniformes.txt\"\n\nanalyzer = Analyzer(\n    classifier_labels_path=custom_labels_path, classifier_model_path=custom_model_path\n)\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    min_conf=0.25,\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre>"},{"location":"api/#liteanalyzer-using-birdnet-lite","title":"LiteAnalyzer - using BirdNET-Lite","text":"<p>To use the legacy BirdNET-Lite model, use the <code>LiteAnalyzer</code> class.</p> <p>Note: The BirdNET-Lite project has been deprecated. The BirdNET-Lite model is no longer included in the PyPi <code>birdnetlib</code> package. This model and label file will be downloaded and installed the first time the <code>LiteAnalyzer</code> is initialized in your Python environment.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer_lite import LiteAnalyzer\nfrom datetime import datetime\n\n# Load and initialize the BirdNET-Lite models.\n# If this is the first time using LiteAnalyzer, the model will be downloaded into your Python environment.\nanalyzer = LiteAnalyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    lat=35.4244,\n    lon=-120.7463,\n    date=datetime(year=2022, month=5, day=10), # use date or week_48\n    min_conf=0.25,\n)\nrecording.analyze()\nprint(recording.detections) # Returns list of detections.\n</code></pre>"},{"location":"changelog/","title":"Version history","text":"<p>Version history is tracked via Github releases and on PyPi.</p>"},{"location":"examples/","title":"Examples","text":"<p>Extract detections as audio file samples and/or spectrograms</p> <p>Supports audio extractions as .flac, .wav and .mp3. Spectrograms exported as .png, .jpg, or other matplotlib.pyplot supported formats. Can be filtered to only extract files above a separate minimum confidence value.</p> <p>Download and analyzer an audio file from a URL</p> <p>Analyze an entire directory</p> <p>Analyze an entire directory with multithreading support</p> <p>Watch a directory and analyze files as they are added</p> <p>On Linux, record live audio and analyze in 3 sec segments</p> <p>Note: <code>arecord</code> only works on Linux.</p> <p>Limit detections to certain species by passing a predefined species list to the analyzer</p> <p>Useful when searching for a particular set of bird detections.</p> <p>Analyze an audio stream in realtime using RecordingBuffer class</p> <p>Watch a directory for new files, then analyze with both analyzer models as files are saved</p> <p>Watch a directory for new files, and apply datetimes by parsing file names (eg 2022-08-15-birdnet-21:05:52.wav) prior to analyzing</p> <p>This example can also be used to modify lat/lon, min_conf, etc., based on file name prior to analyzing.</p> <p>Watch a directory for new files, and apply datetimes by parsing file names (eg 2022-08-15-birdnet-21:05:52.wav) prior to analyzing and save results to SQLite</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p><code>birdnetlib</code> requires Python 3.9+ and prior installation of Tensorflow Lite, librosa and ffmpeg. See BirdNET-Analyzer for more details on installing the Tensorflow-related dependencies.</p> <pre><code>pip install birdnetlib\n</code></pre>"},{"location":"getting-started/#using-birdnet-analyzer","title":"Using BirdNET-Analyzer","text":"<p>To use the latest BirdNET-Analyzer model, use the <code>Analyzer</code> class.</p> <pre><code>from birdnetlib import Recording\nfrom birdnetlib.analyzer import Analyzer\nfrom datetime import datetime\n\n# Load and initialize the BirdNET-Analyzer models.\nanalyzer = Analyzer()\n\nrecording = Recording(\n    analyzer,\n    \"sample.mp3\",\n    lat=35.4244,\n    lon=-120.7463,\n    date=datetime(year=2022, month=5, day=10), # use date or week_48\n    min_conf=0.25,\n)\nrecording.analyze()\nprint(recording.detections)\n</code></pre> <p><code>recording.detections</code> contains a list of detected species, along with time ranges and confidence value.</p> <pre><code>[{'common_name': 'House Finch',\n  'confidence': 0.5744,\n  'end_time': 12.0,\n  'scientific_name': 'Haemorhous mexicanus',\n  'start_time': 9.0,\n  'label': 'Haemorhous mexicanus_House Finch'},\n {'common_name': 'House Finch',\n  'confidence': 0.4496,\n  'end_time': 15.0,\n  'scientific_name': 'Haemorhous mexicanus',\n  'start_time': 12.0,\n  'label': 'Haemorhous mexicanus_House Finch'}]\n</code></pre> <p>The <code>Recording</code> class takes a file path as an argument. You can also use <code>RecordingFileObject</code> to analyze an in-memory object, or <code>RecordingBuffer</code> for handling an array buffer.</p>"},{"location":"utility-classes/","title":"Utility classes","text":""},{"location":"utility-classes/#utility-classes","title":"Utility classes","text":""},{"location":"utility-classes/#directoryanalyzer","title":"DirectoryAnalyzer","text":"<p><code>DirectoryAnalyzer</code> can process a directory and analyze contained files.</p> <pre><code>def on_analyze_complete(recording):\n    print(recording.path)\n    pprint(recording.detections)\n\ndirectory = DirectoryAnalyzer(\n    \"/Birds/mp3_dir\",\n    patterns=[\"*.mp3\", \"*.wav\"]\n)\ndirectory.on_analyze_complete = on_analyze_complete\ndirectory.process()\n</code></pre> <p>See the full example for analyzer options and error handling callbacks.</p>"},{"location":"utility-classes/#directorymultiprocessinganalyzer","title":"DirectoryMultiProcessingAnalyzer","text":"<p><code>DirectoryMultiProcessingAnalyzer</code> can process a directory and analyze contained files, using multiple processes asynchronously.</p> <pre><code>def on_analyze_directory_complete(recordings):\n    for recording in recordings:\n        pprint(recording.detections)\n\ndirectory = \".\"\nbatch = DirectoryMultiProcessingAnalyzer(\n    \"/Birds/mp3_dir\",\n    patterns=[\"*.mp3\", \"*.wav\"]\n)\n\nbatch.on_analyze_directory_complete = on_analyze_directory_complete\nbatch.process()\n</code></pre> <p>See the full example for analyzer options and error handling callbacks.</p>"},{"location":"utility-classes/#directorywatcher","title":"DirectoryWatcher","text":"<p><code>DirectoryWatcher</code> can watch a directory and analyze new files as they are created.</p> <pre><code>def on_analyze_complete(recording):\n    print(recording.path)\n    pprint(recording.detections)\n\nwatcher = DirectoryWatcher(\"/Birds/mp3_dir\")\nwatcher.on_analyze_complete = on_analyze_complete\nwatcher.watch()\n</code></pre> <p>See the full example for analyzer options and error handling callbacks.</p>"},{"location":"utility-classes/#specieslist","title":"SpeciesList","text":"<p><code>SpeciesList</code> uses BirdNET-Analyzer to predict species lists from location and date.</p> <pre><code>species = SpeciesList()\nspecies_list = species.return_list(\n    lon=-120.7463, lat=35.4244, date=datetime(year=2022, month=5, day=10)\n)\nprint(species_list)\n# [{'scientific_name': 'Haemorhous mexicanus', 'common_name': 'House Finch', 'threshold': 0.8916686}, ...]\n</code></pre>"}]}